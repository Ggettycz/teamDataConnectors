const {mysql,DBLink} = require('./mysql_creds.js');
const logMessage = require('../src/utils.js/logs.js');
const {StatsCreate} = require('./elements/StatsCreate.js');
const connectorTypes = ''; //"StatsCreate"';
const STATS_RECORD = 64; // value for DataRecordStatus generated by StatsCreate. why 64? why not 

global.specificLogName = 'runConnector';


(async function(){
    // simple select so no transaction needed.
    const link = new DBLink();
    let query  = "SELECT UUID, Name, ConnectorType, Configuration FROM Connectors"
        + " WHERE Active=1 AND NextRun < NOW()";
    if (connectorTypes != '') {
        query += " AND ConnectorType in ( ? )";
    }
    /* -- backup let dry_run = false;
    await link.begin();*/

    let rows = await link.query(query,[connectorTypes],true);	//Do qry

    for (const row of rows) {
        let uuid = row['UUID'];
        let connectorType = row['ConnectorType'];
        logMessage('Loaded configuration:' + row['Configuration'], 'DEBUG');
        let configuration = {};
        try {
            logMessage('trying to parse configuraiton', 'TRACE');
            configuration = JSON.parse(row['Configuration']);

        } catch (e) {
            logMessage('Missing or wrong configuration', 'WARN');
            configuration = {};
        }
        // run connector based on the type
        // update Next Run if successful
        if (connectorType == 'StatsCreate') {
            await statsCreate(link,uuid,configuration);
        }
    }
    /* -- backup  if(dry_run){
        logMessage("Dry-run enabled; rolling back DB", 'WARN');
        await link.rollback();
    }else await link.complete();*/
    //======END ASYNC WRAPPER======//
    link.end();
   
})();

async function statsCreate(link, uuid, configuration) {
    // get parameters from configuration and DB to be able proces single statsCreate connector
    // configuration will be provided, but for now hardcoded for testing purposes
    logMessage('--------- start of StatsCreate for ' + uuid, 'INFO');
    const connector = new StatsCreate(link, uuid, configuration);
    if (await connector.runConnector()) {
        logMessage(`---- Run of connector: ${uuid} successful.`, 'INFO');
    } else {
        logMessage(`---- FAILED Run of connector: ${uuid}.`, 'ERROR');
    }    

}



async function statsCreateCreateStatsParam(link, recordID, row){
    const { ParamTypeId, AvgValue,MinValue,MaxVal,StdDevVal} = row;
    const query = "INSERT INTO DataRecordParameterStats (ParameterTypeID,RecordID,AvgVal,MinVal,MaxVal,StdDevVal,Status)"
        + " VALUES (?,?,?,?,?,?,?)";
    const result = link.query(query,[ParamTypeId, recordID, AvgValue,MinValue,MaxVal,StdDevVal,STATS_RECORD]);
    return result.insertId;
}


async function statsCreateDeactivateOldParams(link, paramIdsList){
    const result = link.query("UPDATE DataRecordNumberParameters SET Active = False, Status=?"
        + " WHERE ID in (?);",[STATS_RECORD, paramIdsList]);
    return result; // just to have chance to return 
}
