const {mysql,DBLink} = require('./mysql_creds.js');
const {FileExport} = require ('./elements/FileExport.js')
const logMessage = require('../src/utils.js/logs.js');
global.specificLogName = 'runExport';


const connectorTypes = 'DataExport';
const STATS_RECORD = 64; // value for DataRecordStatus generated by StatsCreate. why 64? why not 

(async function(){
    // simple select so no transaction needed.
    const link = new DBLink();

    let query  = "SELECT UUID as uuid, Name as connectorName, ConnectorType as connectorType,"
        + " Configuration as Configuration FROM Connectors"
        + " WHERE Active=1 ";//AND NextRun < NOW()";
    if (connectorTypes != '') {
        query += " AND ConnectorType in ( ? )";
    }

    let rows = await link.query(query,[connectorTypes]);	//Do qry

    for (const row of rows) {
        const {uuid, connectorType, connectorName} = row;
        logMessage('--------- start of new Connector for ' + uuid, 'INFO');
        logMessage('Loaded configuration:' + row['Configuration'], 'DEBUG');
        let configuration = {};
        try {
            logMessage('trying to parse configuraiton', 'TRACE');
            configuration = JSON.parse(row['Configuration']);

        } catch (e) {
            logMessage('No or wrong configuration', 'WARN');
            configuration = {};
        }
        // run connector based on the type
        if (connectorType == 'DataExport') {

            logMessage('conf:' + JSON.stringify(configuration,null,2));
            configuration.toDate='2024-02-22';
            try{
                const connector = new FileExport(link, uuid, connectorName, configuration);
                //connector.helper('dbStatsNotActiveStatsCreated'); break;
                //await link.begin();
                if (await connector.runConnector()) {
                    logMessage(`---- Run of connector: ${uuid} successful.`, 'INFO');
                } else {
                    logMessage(`---- FAILED Run of connector: ${uuid}.`, 'ERROR');
                }    


            }catch(e){
                logMessage('Error: ' + e, 'ERROR');
            }
        }
    }

    link.end();
   
})();


